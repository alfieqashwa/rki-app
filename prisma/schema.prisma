// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    role           Role            @default(ADMIN)
    profile        Profile?
    saleOrders     SaleOrder[]
    purchaseOrders PurchaseOrder[]
}

model Profile {
    id       String @id @default(cuid())
    username String
    position String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String @unique @map("user_id")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Address {
    id         String    @id @default(cuid())
    street     String
    province   String
    regency    String
    district   String
    village    String
    postalCode String    @map("postal_code")
    customers  Company[]
}

model Company {
    id              String           @id @default(cuid())
    name            String
    phone           String?
    isCustomer      Boolean?         @default(true) @map("is_customer")
    isSupplier      Boolean?         @default(false) @map("is_supplier")
    address         Address          @relation(fields: [addressId], references: [id], onDelete: Cascade)
    addressId       String           @map("address_id")
    personInCharges PersonInCharge[]
    saleOrders      SaleOrder[]
    purchaseOrders  PurchaseOrder[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

model PersonInCharge {
    id        String  @id @default(cuid())
    name      String  @unique()
    position  String?
    email     String? @unique
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String

    @@map("person_in_charges")
}

enum Category {
    Product
    Service
}

model Product {
    id           String      @id @default(cuid())
    name         String
    category     Category    @default(Product)
    uom          UomType     @default(other)
    countInStock Int?        @map("count_in_stock")
    salePrice    Float       @map("sale_price")
    costPrice    Float       @map("cost_price")
    orderItems   OrderItem[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

enum UomType {
    pack
    m
    ea
    set
    box
    ls
    tb
    sht
    lot
    roll
    other
}

model OrderItem {
    id          String  @id @default(cuid())
    quantity    Int
    description String?

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String  @map("product_id")

    saleOrder       SaleOrder?     @relation(fields: [saleOrderId], references: [id], onDelete: Cascade)
    saleOrderId     String         @map("sale_order_id")
    purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
    purchaseOrderId String?        @map("purchase_order_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("order_items")
}

enum StatusSaleOrder {
    QUOTATION
    SOLD
    ARCHIVE
}

model SaleOrder {
    id          String          @id @default(cuid())
    orderNumber String          @unique @map("order_number")
    dateOrdered DateTime        @default(now()) @map("date_ordered")
    company     Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId   String          @map("company_id")
    totalPrice  Float           @default(0) @map("total_price")
    orderItems  OrderItem[]
    status      StatusSaleOrder @default(QUOTATION)

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @map("user_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("sale_orders")
}

enum StatusPurchaseOrder {
    QUOTATION
    PURCHASED
    ARCHIVE
}

model PurchaseOrder {
    id          String              @id @default(cuid())
    orderNumber String              @unique @map("order_number")
    dateOrdered DateTime            @default(now()) @map("date_ordered")
    company     Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId   String              @map("company_id")
    totalPrice  Float               @default(0) @map("total_price")
    orderItems  OrderItem[]
    status      StatusPurchaseOrder @default(QUOTATION)

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @map("user_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("purchase_orders")
}

model Province {
    id   String @id
    name String
}

model Regency {
    id         String @id
    provinceId String @map("province_id")
    name       String
}

model District {
    id        String @id
    regencyId String @map("regency_id")
    name      String
}

model Village {
    id         String @id
    districtId String @map("district_id")
    name       String
}

enum Role {
    DEWA
    ADMIN
    EDITOR
}
